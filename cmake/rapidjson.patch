--- rapidjson.orig/include/rapidjson/writer.h	2013-09-05 13:30:49.890315055 -0700
+++ rapidjson/include/rapidjson/writer.h	2013-09-25 14:00:10.218522918 -0700
@@ -4,6 +4,7 @@
 #include "rapidjson.h"
 #include "internal/stack.h"
 #include "internal/strfunc.h"
+#include <climits>
 #include <cstdio>	// snprintf() or _sprintf_s()
 #include <new>		// placement new
 
@@ -161,8 +162,7 @@
 		} while (p != buffer);
 	}
 
-	//! \todo Optimization with custom double-to-string converter.
-	void WriteDouble(double d) {
+	void WriteLargeDouble(double d) {
 		char buffer[100];
 #if _MSC_VER
 		int ret = sprintf_s(buffer, sizeof(buffer), "%g", d);
@@ -174,6 +174,67 @@
 			os_.Put(buffer[i]);
 	}
 
+	void WriteDouble(double d) {
+		if (d > INT_MAX) {
+		  WriteLargeDouble(d);
+		  return;
+		}
+
+		const int precision = 4;
+		const uint32_t magnitude = 10000;
+		char buffer[100];
+		char* p = buffer;
+		double diff = 0.0;
+
+		if (d < 0) {
+			os_.Put('-');
+			d = -d;
+		}
+
+		int numerator = static_cast<int>(d);
+		double tmp = (d - numerator) * magnitude;
+		uint32_t fraction = static_cast<uint32_t>(tmp);
+		diff = tmp - fraction;
+
+		if (diff > 0.5) {
+			++fraction;
+			if (fraction >= magnitude) {
+			fraction = 0;
+			++numerator;
+			}
+		} else if (diff == 0.5 && ((fraction == 0) || (fraction & 1))) {
+			// bankers rounding
+			++fraction;
+		}
+
+		// output decimal fraction
+		if (fraction != 0) {
+			do {
+			*p++ = char(fraction % 10) + '0';
+			fraction /= 10;
+			}
+			while (fraction > 0);
+
+			while (p - buffer < precision) {
+				*p++ = '0';
+			}
+			*p++ = '.';
+		}
+
+		// output numerator
+		do {
+			*p++ = (numerator % 10) + '0';
+			numerator /= 10;
+		}
+		while (numerator > 0);
+
+		do {
+			--p;
+			os_.Put(*p);
+		}
+		while (p != buffer);
+	}
+
 	void WriteString(const Ch* str, SizeType length)  {
 		static const char hexDigits[16] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
 		static const char escape[256] = {
